spring.config.import=optional:env.properties

SERVER_PORT=8299

ORGANISATION=zonesoft
NAMESPACE=hello-world-apps-and-services
APPLICATION_NAME=hello-world-auth-server
DEPLOYMENT=local-dev

OPEN_TELEMETRY_DISABLED=true
OPEN_TELEMETRY_LOGS_ENABLED=false
OPEN_TELEMETRY_INSTRUMENTATION_ENABLED=false
OPEN_TELEMETRY_TOMCAT_ENABLED=false
OPEN_TELEMETRY_EXPORTER_ENDPOINT=http://host.docker.internal:4418


server.port=${ENV_SERVER_PORT:${SERVER_PORT}}

spring.application.org=${ENV_UI_ORGANISATION:${ORGANISATION}}
spring.application.namespace=${ENV_UI_NAMESPACE:${NAMESPACE}}
spring.application.name=${ENV_UI_APPLICATION_NAME:${APPLICATION_NAME}}
spring.application.deployment=${ENV_UI_DEPLOYMENT:${DEPLOYMENT}}

otel.service.name=${ENV_UI_APPLICATION_NAME:${APPLICATION_NAME}}
otel.resource.attributes.org=${ENV_UI_ORGANISATION:${ORGANISATION}}
otel.resource.attributes.namespace=${ENV_UI_NAMESPACE:${NAMESPACE}}
otel.resource.attributes.deployment=${ENV_UI_DEPLOYMENT:${DEPLOYMENT}}

otel.propagators=tracecontext,baggage
otel.metrics.exporter=otlp
otel.traces.exporter=otlp
otel.logs.exporter=otlp
otel.sdk.disabled=${ENV_OTEL_DISABLED:${OPEN_TELEMETRY_DISABLED}}
otel.exporter.otlp.endpoint=${ENV_OTEL_EXPORTER_ENDPOINT:${OPEN_TELEMETRY_EXPORTER_ENDPOINT}}
otel.instrumentation.logback-appender.enabled=${ENV_OTEL_LOGS_ENABLED:${OPEN_TELEMETRY_LOGS_ENABLED}}
otel.instrumentation.micrometer.enabled=${ENV_OTEL_INSTRUMENTATION_ENABLED:${OPEN_TELEMETRY_INSTRUMENTATION_ENABLED}}
server.tomcat.mbeanregistry.enabled=${OPEN_TELEMETRY_TOMCAT_ENABLED}




##logging.level.org.springframework.security=trace
##spring.security.user.name=user1
##spring.security.user.password=password
##spring.security.oauth2.authorizationserver.client.messaging-client.registration.client-id=messaging-client
#spring.security.oauth2.authorizationserver.client.messaging-client.registration.client-id=hello-world-ui
#spring.security.oauth2.authorizationserver.client.messaging-client.registration.client-secret={noop}secret
#spring.security.oauth2.authorizationserver.client.messaging-client.registration.client-authentication-methods=client_secret_basic
#spring.security.oauth2.authorizationserver.client.messaging-client.registration.authorization-grant-types=authorization_code, refresh_token, client_credentials
##spring.security.oauth2.authorizationserver.client.messaging-client.registration.redirect-uris=http://127.0.0.1:8080/login/oauth2/code/messaging-client-oidc, http://127.0.0.1:8080/authorized
#spring.security.oauth2.authorizationserver.client.messaging-client.registration.redirect-uris=http://127.0.0.1:8283/login/oauth2/code/messaging-client-oidc, http://127.0.0.1:8283/authorized
##spring.security.oauth2.authorizationserver.client.messaging-client.registration.post-logout-redirect-uris=http://127.0.0.1:8080/logged-out
#spring.security.oauth2.authorizationserver.client.messaging-client.registration.post-logout-redirect-uris=http://127.0.0.1:8283/signed-out
#spring.security.oauth2.authorizationserver.client.messaging-client.registration.scopes=openid, profile, message.read, message.write
#spring.security.oauth2.authorizationserver.client.messaging-client.require-authorization-consent=true


#server.port=9000
#logging.level.root=INFO
logging.level.org.springframework.web=INFO
logging.level.org.springframework.security=INFO
logging.level.org.springframework.security.oauth2=DEBUG
#spring.security.oauth2.authorizationserver.issuer=http://auth-server:9000
spring.security.oauth2.authorizationserver.issuer=http://auth-server:8299
#spring.security.oauth2.authorizationserver.client.articles-client.registration.client-id=articles-client
spring.security.oauth2.authorizationserver.client.hello-world-ui.registration.client-id=hello-world-ui
spring.security.oauth2.authorizationserver.client.hello-world-ui.registration.client-secret={noop}secret
#spring.security.oauth2.authorizationserver.client.articles-client.registration.client-name=Articles Client
spring.security.oauth2.authorizationserver.client.hello-world-ui.registration.client-name=hello-world-ui
spring.security.oauth2.authorizationserver.client.hello-world-ui.registration.client-authentication-methods=client_secret_basic
#spring.security.oauth2.authorizationserver.client.articles-client.registration.authorization-grant-types=authorization_code, refresh_token
spring.security.oauth2.authorizationserver.client.hello-world-ui.registration.authorization-grant-types=authorization_code, refresh_token, client_credentials
#spring.security.oauth2.authorizationserver.client.hello-world-ui.registration.authorization-grant-types=authorization_code, refresh_token
#spring.security.oauth2.authorizationserver.client.articles-client.registration.redirect-uris=http://127.0.0.1:8080/login/oauth2/code/articles-client-oidc, http://127.0.0.1:8080/authorized
spring.security.oauth2.authorizationserver.client.hello-world-ui.registration.redirect-uris=http://127.0.0.1:8283/login/oauth2/code/hello-world-ui-oidc, http://127.0.0.1:8283/authorized
#spring.security.oauth2.authorizationserver.client.articles-client.registration.scopes=openid, articles.read
#spring.security.oauth2.authorizationserver.client.hello-world-ui.registration.scopes=openid,  profile, calendar.read, clock.read
spring.security.oauth2.authorizationserver.client.hello-world-ui.registration.scopes=openid, calendar.read

