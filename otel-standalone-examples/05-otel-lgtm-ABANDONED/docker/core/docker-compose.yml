# Orchestrates the start up of storage components required by the product service.
# In particular, it starts a PostgreSQL database and an Elasticsearch instance.
#https://dev.to/ivankurchenko/building-decoupled-monitoring-with-opentelemetry-5f41

services:
  postgres:
    image: postgres:16-alpine
    container_name: postgres
    hostname: postgres
    restart: always
    networks:
      - products
    environment:
      POSTGRES_DB: "products"
      POSTGRES_USER: products_user
      POSTGRES_PASSWORD: products_password
    ports:
      - 5432:5432

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: elasticsearch
    hostname: elasticsearch
    restart: always
    networks:
      - products
    environment:
      - "xpack.security.enabled=false"
      - "discovery.type=single-node"
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - 9200:9200

#  # Start Jeager for traces storage.
#  # UI is available at http://localhost:16686
#  # See for more details: https://www.jaegertracing.io/docs/1.53/getting-started/#all-in-one
#  jaeger:
#    image: jaegertracing/all-in-one:1.53
#    container_name: jaeger
#    hostname: jaeger
#    restart: always
#    networks:
#      - products
#    ports:
#      - "16686:16686"
#      - "4317:4317"
#      - "4318:4318"
#      
#  # Start prometheus that will collect metrics from the OTEL collector.
#  # The UI is available at http://localhost:9090
#  prometheus-collector:
#    image: prom/prometheus:v2.33.3
#    container_name: prometheus
#    hostname: prometheus
#    restart: always
#    volumes:
#      - ./prometheus/config.yml:/etc/prometheus/prometheus.yml
#    networks:
#      - products
#    ports:
#      - "9090:9090"

  # Start Grafana Tempo to receive and store tracing data
  # This configuration is largely inspired by the Tempo local storage docker-compose example:
  # https://github.com/grafana/tempo/blob/main/example/docker-compose/local/docker-compose.yaml
  # It uses a latest version of the Tempo image at the time of writing.
  tempo:
    image: grafana/tempo:2.3.1
    container_name: tempo
    command: [ "-config.file=/etc/grafana-tempo.yaml" ]
    restart: always
    volumes:
      - ./tempo/config.yml:/etc/grafana-tempo.yaml
    ports:
      - "5317:4317"  # otlp grpc
      - "5318:4318"  # otlp http
      - "3200:3200"  # tempo
    networks:
      - products
      
  # Starts Grafana Mimir to receive and store metrics data.
  # This configuration is largely inspired by the Mimir "Get Started" documentation:
  # https://grafana.com/docs/mimir/latest/get-started/
  # It uses a latest version of the Mimir image at the time of writing.
  mimir:
    image: grafana/mimir:2.11.0
    container_name: mimir
    command: [ "-config.file=/etc/grafana-mimir.yaml" ]
    restart: always
    volumes:
      - ./mimir/config.yml:/etc/grafana-mimir.yaml
    ports:
      - "9009:9009" # Mimir port
    networks:
      - products
      
  # Starts Grafana Loki to receive and store logs data.
  # This configuration is largely inspired by the following documentation:
  # https://grafana.com/docs/loki/latest/setup/install/docker/
  # It uses the latest version of the Loki image at the time of writing.
  loki:
    image: grafana/loki:2.9.4
    container_name: loki
    command: ["-config.file=/etc/loki/grafana-loki.yaml"]
    restart: always
    volumes:
      - ./loki/config.yml:/etc/loki/grafana-loki.yaml
    ports:
      - "3100:3100" # Loki port
    networks:
      - products
      
#  # Start grafana agent to receive data from OpenTelemetry collector.
#  # See for more details: https://grafana.com/docs/agent/latest/static/set-up/install/install-agent-docker/
#  grafana-agent:
#    image: grafana/agent:v0.39.2
#    restart: always
#    environment:
#      - AGENT_MODE=flow
#    volumes:
#      - ./mount/grafana-agent.river:/etc/agent/grafana-agent.river
#    command:
#      - run
#      - --server.http.listen-addr=0.0.0.0:12345
#      - /etc/agent/grafana-agent.river
#    ports:
#      - "6317:4317"  # OTLP grpc
#      - "6318:4318"  # OTLP http
#      - "12345:12345" # UI
#    networks:
#      - products
      
#  grafana-ui:
#    image: grafana/grafana:10.2.2
#    container_name: grafana-ui
#    restart: always
#    volumes:
#      - ./mount/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
#    environment:
#      - GF_AUTH_ANONYMOUS_ENABLED=true
#      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
#      - GF_AUTH_DISABLE_LOGIN_FORM=true
#      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor traceQLStreaming metricsSummary
#    ports:
#      - "3000:3000"
#    networks:
#      - products


      
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.93.0
    container_name: otel-collector
    hostname: otel-collector
    extra_hosts: 
      - host.docker.internal:host-gateway
    volumes:
      - ./otel-collector/config.yml:/etc/otelcol-contrib/config.yaml
    ports:
#      - "9094:9094" # Prometheus http exporter
      - "4417:4417" # OTLP gRPC receiver
      - "4418:4418" # OTLP http receiver
    networks:
      - products

networks:
  products:
